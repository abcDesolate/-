import time, os, sys
from media.sensor import *
from media.display import *
from media.media import *

picture_width = 800
picture_height = 480

sensor_id = 2
sensor = None

# 显示模式选择
DISPLAY_MODE = "LCD"
DISPLAY_WIDTH = 800
DISPLAY_HEIGHT = 480

# 图像处理参数
#BINARY_THRESHOLD = （60，255）  # 二值化阈值，用于识别黑色(0-60)
BLACK_BLOCK_THRESHOLD = [(0, 60, -128, 127, -128, 127)]  # 黑色方块的颜色阈值

# 定义全局变量
x_start = 0
prev_center_x = 0
prev_center_y = 0
img = None
detection_width = 30  # 检测区域宽度（像素）
scan_step = 10        # 正常扫描步长
precision_step = 6    # 精确定位步长
is_precision_mode = False  # 精确定位模式标志
height_threshold = 60    # 色块高度切分阈值（像素）
split_height = 30         # 切分后每个小区域的高度（像素）
scan_flag = 0
point = []                # 定义列表，用于储存获取的点
point_Num = 0             # 定义列表的索引用于放置所获取的图像的坐标

#def scan_timer():
#    global x_start, prev_center_x, prev_center_y, img, scan_step, is_precision_mode, scan_flag

#    try:
#        # 1. 更新扫描区域

try:
    # 初始化硬件
    sensor = Sensor(id=sensor_id)
    sensor.reset()
    sensor.set_framesize(width=picture_width, height=picture_height, chn=0)
    sensor.set_pixformat(Sensor.RGB565, chn=0)

    Display.init(Display.ST7701, width=DISPLAY_WIDTH, height=DISPLAY_HEIGHT, to_ide=True)
    MediaManager.init()
    sensor.run()

#    # 启动定时器（调整周期）
#    tim = Timer(-1)
#    tim.init(period=200, mode=Timer.PERIODIC, callback=scan_timer)

    # 主循环
    while True:
        os.exitpoint()
        if is_precision_mode:
            if x_start >= picture_width - detection_width:
                x_start = 0
#                is_precision_mode = False
                scan_flag = 1
            else:
                x_start += precision_step
        else:
            if x_start >= picture_width - detection_width:
                scan_flag = 1

            else:
                x_start += scan_step

        # 2. 获取图像
        img = sensor.snapshot(chn=0)


        if scan_flag == 0:
            # 3. 图像预处理：转换为灰度图
            gray_img = img.to_grayscale()

            # 4. 图像二值化处理
            binary_img = gray_img.binary([(60, 255)])

            # 5. 查找黑色色块
            blobs = binary_img.find_blobs(
                BLACK_BLOCK_THRESHOLD,  # 黑色方块的颜色阈值
                x_stride=2, y_stride=2,      # 缩小扫描步长提高精度
                pixels_threshold=150,        # 增加像素阈值，过滤小噪点
                area_threshold=300,          # 增加面积阈值，过滤小噪点
                merge=True,
                roi=(x_start, 0, detection_width, picture_height)
            )

            # 6. 在原始图像上绘制检测结果
            if blobs:
                for blob in blobs:
                    x, y, w, h = blob.x(), blob.y(), blob.w(), blob.h()
                    center_x = x + w // 2
                    center_y = y + h // 2

                    # 绘制原始色块检测框
                    img.draw_rectangle(x, y, w, h, (0, 255, 0), thickness=2)
                    img.draw_cross(center_x, center_y, size=5, color=(255, 0, 0))

                    # 输出原始色块坐标（无论是否切分）
                    print(f"[黑色方块] 中心: ({center_x}, {center_y}) | 尺寸: {w}x{h} | 扫描区: x={x_start}")

                    # 色块高度切分处理
                    if h > height_threshold:
                        print(f"[高度切分] 色块高度 {h} 超过阈值 {height_threshold}，开始切分")
                        # 计算切分次数
                        split_count = h // split_height
                        if h % split_height > 0:
                            split_count += 1

                        # 切分色块并处理每个小区域
                        for i in range(split_count):
                            split_y = y + i * split_height
                            split_h = split_height
                            # 处理最后一个切分区域
                            if i == split_count - 1:
                                split_h = h - i * split_height

                            # 计算小区域中心坐标
                            split_center_x = center_x
                            split_center_y = split_y + split_h // 2

                            # 绘制切分区域
                            img.draw_rectangle(x, split_y, w, split_h, (255, 255, 0), thickness=1)
                            img.draw_cross(split_center_x, split_center_y, size=3, color=(0, 0, 255))

                            # 输出小区域中心坐标
                            print(f"[切分区域{i+1}] 中心: ({split_center_x}, {split_center_y}) | 高度: {split_h}")

                            # 更新上一帧坐标
                            prev_center_x, prev_center_y = split_center_x, split_center_y
                            point_Num += 1
                            point.append((prev_center_x, prev_center_y))
                    else:
                        # 正常色块，使用原始中心坐标
                        prev_center_x, prev_center_y = center_x, center_y
                        point_Num += 1
                        point.append((prev_center_x, prev_center_y))

                    # 进入精确定位模式
                    if not is_precision_mode:
                        is_precision_mode = True
                        scan_step = precision_step
                        print("进入精确定位模式，步长减小为", precision_step)
            else:
                # 未检测到目标时切换回正常模式
                is_precision_mode = False
                scan_step = 10
                print("切换回正常扫描模式，步长恢复为", scan_step)

            # 显示扫描区域边界
            img.draw_rectangle(x_start, 0, detection_width, picture_height, (255, 0, 0), thickness=1)

            # 显示处理后的图像
        if img:
            Display.show_image(
                img,
                x=int((DISPLAY_WIDTH - picture_width) / 2),
                y=int((DISPLAY_HEIGHT - picture_height) / 2)
            )
        if scan_flag==1:
            print(point)



except KeyboardInterrupt:
    print("用户停止")
    print(f"共存储 {point_Num} 个坐标点")
except BaseException as e:
    print(f"异常: {e}")
finally:
    if sensor:
        sensor.stop()
    Display.deinit()
    MediaManager.deinit()
    print(f"程序结束，共存储 {point_Num} 个坐标点")
